stages:
  - lint
  - changelog
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  PYTHON_VERSION: "3.11"

# Base image for Python jobs
.python-base:
  image: python:3.11-slim
  before_script:
    - pip install poetry==1.6.1
    - poetry config virtualenvs.create false
    - poetry install

# Lint job
lint:black:
  extends: .python-base
  stage: lint
  script:
    - poetry run black --check src/ tests/
  allow_failure: false

lint:flake8:
  extends: .python-base
  stage: lint
  script:
    - poetry run flake8 src/ tests/
  allow_failure: false

lint:mypy:
  extends: .python-base
  stage: lint
  script:
    - poetry run mypy src/
  allow_failure: true

# Changelog validation
changelog:check:
  stage: changelog
  image: alpine:latest
  before_script:
    - apk add --no-cache git bash
  script:
    - ./scripts/check_changelog.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  allow_failure: false

# Test job with coverage
test:pytest:
  extends: .python-base
  stage: test
  script:
    - poetry run pytest --cov=src --cov-report=term --cov-report=xml --cov-report=html
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Build Docker image
build:docker:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
    - docker push $DOCKER_IMAGE:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Deploy to staging (example)
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploy to staging environment"
    - echo "Image: $DOCKER_IMAGE:$DOCKER_TAG"
    # Add your deployment commands here
  environment:
    name: staging
    url: https://staging.example.com
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  when: manual

# Deploy to production (example)
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploy to production environment"
    - echo "Image: $DOCKER_IMAGE:$DOCKER_TAG"
    # Add your deployment commands here
  environment:
    name: production
    url: https://production.example.com
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  when: manual
